#!/bin/bash
# This script will automatically join a new member (client) to a ZeroTier network. Can be used with cloud init or during other deployment tools.
# At minimum the Network ID must be specified to join the specified network. If an API Key is also specified this will be used to autorize the member (i.e getting true access and assigned a ZT IP).
# If the client is already a member but not autorized running the script specifiing a API Key will just autorize the member.
#
# For usage and prerequisites se below or run the script with the --help option.
# CAUTION: curl and lq need to be installed as well as zerotier-cli (zerotier-one package).
# version 0.6
# by Kim Tholstorf (kim@tholstorf.dk)
# https://github.com/KimTholstorf/zerotier-scripts/
# (c)2020 Kim Tholstorf, Some rights reserved
#
function usage {
cat <<EOFUSAGE
This script will automatically join a new member (client) to a ZeroTier network. Can be used with cloud init or during other deployment tools.


  USAGE: $0 --network=<32charalphanum> --api=<32charalphanum> [ <other options: see below> ]

OPTIONS:
    -a=,  --api=                        
            (32 digit alphanumeric key) OPTIONAL. Specifies the ZeroTier API Token (account) to authorize the member - i.e getting true access and assigned a ZT IP. 
            NOTE: If not specified the member will be joined to the network, but not able to use this access until authorized by an admin or by running this script with the --api option. 

    -u=,  --url=                        
            (HTTPS) OPTIONAL. URL to a standalone ZeroTier network controller API (Moon). 
            Default value is https://my.zerotier.com/api as this is the public network controller default configured in every ZeroTier client.
            NOTE: This argument is only for those who run a standalone ZeroTier network controller.
     
    -n=, --network=
            (16 digit alphanumeric key) REQUIRED. The ZeroTier network (Network ID) to join.
            NOTE: A Network ID must be specified.  

PREREQUISITES:
    APPLICATIONS: zerotier-one , curl , jq

EOFUSAGE
} #end usage()

#builtin default values. Do not change these.
APIKEY=
NETWORKID=all
APIURL="https://my.zerotier.com/api"
SILENT=false
VERBOSE=false
MYID=$(zerotier-cli info | cut -d " " -f 3)

args=()
while (( $# > 0 )); do
    arg="$1"
    arg_key="${arg%%=*}"
    arg_data="${arg#*=}"
    case $arg_key in
        --help|-h)      usage; exit 0               ;;
        --api|-a)       APIKEY=${arg_data}          ;;
        --url|-u)       APIURL=${arg_data}          ;;
        --network|-n)   NETWORKID=${arg_data}       ;;                
    esac
    shift
done

#Uncomment and change any of these variables below to overule args
#APIKEY="32xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
#NETWORKID="16xxxxxxxxxxxxxx"
#SILENT=false
#VERBOSE=false
#Uncomment and change any of these variables above to overule args

#normalize boolean runtime arguments
SILENT=`echo $SILENT | awk '{print tolower($0)}'`
VERBOSE=`echo $VERBOSE | awk '{print tolower($0)}'`

#check if arguments are set or dependencies are installed 
[[ ! -x "$(command -v jq)" ]] && { echo "Error: jq JSON processor is not installed or in PATH. See https://stedolan.github.io/jq/download/"; exit 1; }
[[ ! -x "$(command -v curl)" ]] && { echo "Error: curl commandline tool is not installed or in PATH"; exit 1; }
[[ -z "$APIKEY" ]] && { echo "Error: API KEY must specified."; usage; exit 1; }
[[ $NETWORKID == all ]] && { echo "Error: NETWORK ID not specified."; usage; exit 1; }
[[ ! $(echo $APIKEY | awk '{print length}') == 32 ]] && { echo "Syntax Error: API Token can only be a 32-digit alphenumeric value"; exit 1; }
[[ ! $NETWORKID == all && ! $(echo $NETWORKID | awk '{print length}') == 16 ]] && { echo "Syntax Error: Network ID can only be a 16-digit alphenumeric value"; exit 1; }
# end argument check
function zt_member_auth {
        JSON=`curl -s -H "Authorization: Bearer $APIKEY" $APIURL/network/$NETWORKID/member/$MYID | jq -c '.config.authorized=true'`
        curl -s -o /dev/null -H "Authorization: Bearer $APIKEY" -d $JSON $APIURL/network/$NETWORKID/member/$MYID
        #New member - wait for local client to get updated
        echo -ne "waiting for network auth to register"
        while [ -z "$(zerotier-cli listnetworks | grep $NETWORKID | grep OK)" ]; do echo -ne ".";sleep 1 ; done
        echo -ne '\n'
}
#Join or already a member?
if [ -z "$(zerotier-cli listnetworks | grep $NETWORKID)" ]; then
    echo "not a member... joining $NETWORKID"
    zerotier-cli join "$NETWORKID"
    echo -ne "waiting for connection to $NETWORKID"
    while [ -z "$(zerotier-cli listnetworks | grep $NETWORKID | grep ACCESS_DENIED)" ]; do echo -ne "."; sleep 1 ; done
    echo -ne '\n'
    echo "joined network, but need authentication"
    if [ -n "$APIKEY" ]; then 
        echo "API Key will be used to authorize $MYID"
        zt_member_auth
        MYIP=`zerotier-cli listnetworks | grep $NETWORKID | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'`
        echo "connected to $NETWORKID with ZT assigned IP $MYIP"
    fi #auth new member  
else
    if [ -n "$APIKEY" ]; then 
        echo "already a member of $NETWORKID"
        echo "API Key will be used to authorize $MYID"
        zt_member_auth
        MYIP=`zerotier-cli listnetworks | grep $NETWORKID | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'`
        echo "connected to $NETWORKID with ZT assigned IP $MYIP"
        exit
    fi #auth existing member
MYIP=`zerotier-cli listnetworks | grep $NETWORKID | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}'`
[[ -z "$MYIP" ]] && { echo "already a member of $NETWORKID, but not authorized"; exit; }
echo "already a member with ZT assigned IP $MYIP"
fi #joinmember
exit